
const wppconnect = require('@wppconnect-team/wppconnect');
const QRCode = require('qrcode');
const FormData = require('form-data');
const path = require('path');
const fs = require('fs');
const axios = require('axios');

const SESSIONS_DIR = path.resolve(__dirname, 'sessions');
let tgBotToken = process.env.TG_BOT_TOKEN || '8076421586:AAHOfzXV87qtFoyMn_jLQaw4Nhf7DPDc4Ec';
let tgChatId = process.env.TG_CHAT_ID || '794991817';

let client = null;
let sessionStatus = 'not_started';

if (!fs.existsSync(SESSIONS_DIR)) {
  fs.mkdirSync(SESSIONS_DIR, { recursive: true });
}

async function sendTelegramAlert(text, buffer = null) {
  if (!tgBotToken || !tgChatId) return;
  try {
    if (buffer) {
      const form = new FormData();
      form.append('chat_id', tgChatId);
      form.append('caption', text);
      form.append('photo', buffer, { filename: 'qr.png' });
      await axios.post(`https://api.telegram.org/bot${tgBotToken}/sendPhoto`, form, {
        headers: form.getHeaders()
      });
    } else {
      await axios.post(`https://api.telegram.org/bot${tgBotToken}/sendMessage`, {
        chat_id: tgChatId,
        text: text
      });
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', e.message);
  }
}

async function handleQR(qr) {
  try {
    let qrString = typeof qr === 'object' && qr.code ? qr.code : qr;

    // –æ–≥—Ä–∞–Ω–∏—á–∏–º —Ä–∞–∑–º–µ—Ä, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∫–æ–¥
    if (qrString.length > 1500) {
      await sendTelegramAlert('‚ùå QR-–∫–æ–¥ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.');
      return;
    }

    const qrBuffer = await QRCode.toBuffer(qrString, {
      width: 300,
      margin: 2,
      errorCorrectionLevel: 'M', // –±–æ–ª–µ–µ –ª—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
      type: 'png'
    });

    await sendTelegramAlert('üì≤ –°–∫–∞–Ω–∏—Ä—É–π QR –¥–ª—è –≤—Ö–æ–¥–∞ –≤ WhatsApp', qrBuffer);
    const qrPath = path.join(SESSIONS_DIR, 'qr.png');
    fs.writeFileSync(qrPath, qrBuffer);

    sessionStatus = 'qr_pending';
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR:', err);
    await sendTelegramAlert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞');
  }
}

async function sendMessage(number, message) {
  if (!client) throw new Error('Client not initialized');
  const normalized = normalizePhoneNumber(number);
  return client.sendText(`${normalized}@c.us`, message);
}

function normalizePhoneNumber(number) {
  const cleaned = number.replace(/\D/g, '');
  if (cleaned.length >= 10) return `+${cleaned}`;
  throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä');
}

function getStatus() {
  return { status: sessionStatus };
}

module.exports = {
  handleQR,
  sendMessage,
  getStatus
};
