# --- –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ Google Sheets ---
# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets:
# 1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://console.cloud.google.com/
# 2. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç, –≤–∫–ª—é—á–∏—Ç–µ API Google Sheets –∏ Google Drive.
# 3. –°–æ–∑–¥–∞–π—Ç–µ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç, —Å–∫–∞—á–∞–π—Ç–µ credentials.json.
# 4. –î–æ–±–∞–≤—å—Ç–µ email —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ (–∫–∞–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä).
# 5. –ü–æ–º–µ—Å—Ç–∏—Ç–µ credentials.json —Ä—è–¥–æ–º —Å —ç—Ç–∏–º —Ñ–∞–π–ª–æ–º.

import telebot
from telebot import types
import requests
import os
import io
import csv
import openpyxl
import re
from datetime import datetime
import sqlite3

API_TOKEN = os.getenv('TG_BOT_TOKEN') or '8076421586:AAHOfzXV87qtFoyMn_jLQaw4Nhf7DPDc4Ec'
SERVER_URL = 'http://localhost:5000'

bot = telebot.TeleBot(API_TOKEN)

DB_PATH = 'botik_data.sqlite3'

def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (
        chat_id INTEGER PRIMARY KEY,
        numbers TEXT,
        failed_numbers TEXT
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS history (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        chat_id INTEGER,
        date TEXT,
        total INTEGER,
        sent INTEGER,
        failed INTEGER,
        text TEXT
    )''')
    conn.commit()
    conn.close()

def save_numbers(chat_id, numbers):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('INSERT OR REPLACE INTO users (chat_id, numbers, failed_numbers) VALUES (?, ?, COALESCE((SELECT failed_numbers FROM users WHERE chat_id=?), ?))',
              (chat_id, ','.join(numbers), chat_id, ''))
    conn.commit()
    conn.close()

def get_numbers(chat_id):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('SELECT numbers FROM users WHERE chat_id=?', (chat_id,))
    row = c.fetchone()
    conn.close()
    if row and row[0]:
        return row[0].split(',')
    return []

def save_failed_numbers(chat_id, failed_numbers):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('UPDATE users SET failed_numbers=? WHERE chat_id=?', (','.join(failed_numbers), chat_id))
    conn.commit()
    conn.close()

def get_failed_numbers(chat_id):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('SELECT failed_numbers FROM users WHERE chat_id=?', (chat_id,))
    row = c.fetchone()
    conn.close()
    if row and row[0]:
        return row[0].split(',')
    return []

def add_history(chat_id, date, total, sent, failed, text):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('INSERT INTO history (chat_id, date, total, sent, failed, text) VALUES (?, ?, ?, ?, ?, ?)',
              (chat_id, date, total, sent, failed, text))
    conn.commit()
    conn.close()

def get_history(chat_id, limit=5):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('SELECT date, total, sent, failed, text FROM history WHERE chat_id=? ORDER BY id DESC LIMIT ?', (chat_id, limit))
    rows = c.fetchall()
    conn.close()
    return rows

def get_history_full(chat_id):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('SELECT date, total, sent, failed, text FROM history WHERE chat_id=? ORDER BY id', (chat_id,))
    rows = c.fetchall()
    conn.close()
    return rows

# --- Google Sheets ---
try:
    import gspread
    from oauth2client.service_account import ServiceAccountCredentials
    GSHEETS_AVAILABLE = True
except ImportError:
    GSHEETS_AVAILABLE = False

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(commands=['start'])
def start_message(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ WhatsApp
    try:
        resp = requests.get(f'{SERVER_URL}/session-status')
        if resp.ok:
            status = resp.json()
            if status.get('authenticated'):
                msg_status = '‚úÖ WhatsApp —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!'
            else:
                msg_status = '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ WhatsApp. QR-–∫–æ–¥ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã...'
        else:
            msg_status = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏'
    except Exception as e:
        msg_status = f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}'
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton('–ó–∞–≥—Ä—É–∑–∏—Ç—å Google –¢–∞–±–ª–∏—Ü—É', callback_data='upload_sheet'),
        types.InlineKeyboardButton('–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª (Excel/CSV)', callback_data='upload_file'),
        types.InlineKeyboardButton('–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data='start_sending'),
        types.InlineKeyboardButton('–°—Ç–∞—Ç—É—Å WhatsApp', callback_data='status'),
        types.InlineKeyboardButton('–°–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç WhatsApp', callback_data='change_account'),
        types.InlineKeyboardButton('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º', callback_data='retry_failed'),
        types.InlineKeyboardButton('–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫', callback_data='history'),
        types.InlineKeyboardButton('–°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ', callback_data='reset_history_failed'),
        types.InlineKeyboardButton('–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ (CSV)', callback_data='export_history_csv'),
        types.InlineKeyboardButton('‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data='stop_broadcast'),
        types.InlineKeyboardButton('üåê –°–º–µ–Ω–∏—Ç—å –ø—Ä–æ–∫—Å–∏', callback_data='change_proxy'),
        types.InlineKeyboardButton('üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é', callback_data='clear_session'),
        types.InlineKeyboardButton('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å WhatsApp', callback_data='check_auth_status'),
        types.InlineKeyboardButton('‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='settings')
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é (–ø–æ 2 –≤ —Ä—è–¥)
    for i in range(0, len(buttons), 2):
        if i+1 < len(buttons):
            markup.add(buttons[i], buttons[i+1])
        else:
            markup.add(buttons[i])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∏ –º–µ–Ω—é
    bot.send_message(message.chat.id, f"{msg_status}\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.data == 'upload_sheet':
        bot.send_message(call.message.chat.id, '–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Google –¢–∞–±–ª–∏—Ü—É —Å –Ω–æ–º–µ—Ä–∞–º–∏.')
        bot.register_next_step_handler(call.message, process_sheet_link)
    
    elif call.data == 'upload_file':
        bot.send_message(call.message.chat.id, '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª —Å –Ω–æ–º–µ—Ä–∞–º–∏ (Excel .xlsx –∏–ª–∏ CSV).')
        bot.register_next_step_handler(call.message, process_file_upload)
    
    elif call.data == 'start_sending':
        bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:')
        bot.register_next_step_handler(call.message, process_message_text)
    
    elif call.data == 'status':
        try:
            resp = requests.get(f'{SERVER_URL}/session-status')
            if resp.ok:
                status = resp.json()
                if status.get('ready'):
                    msg = f"‚úÖ WhatsApp –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
                elif status.get('blocked'):
                    msg = "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç WhatsApp –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!"
                else:
                    msg = "‚ö†Ô∏è WhatsApp –Ω–µ –≥–æ—Ç–æ–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è."
            else:
                msg = '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞.'
        except Exception as e:
            msg = f'‚ùå –û—à–∏–±–∫–∞: {e}'
        
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, msg)
    
    elif call.data == 'change_account':
        try:
            resp = requests.post(f'{SERVER_URL}/change-account')
            if resp.ok:
                bot.send_message(call.message.chat.id, 'üîÑ –°–º–µ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞. QR-–∫–æ–¥ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã...')
            else:
                bot.send_message(call.message.chat.id, f'‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {resp.text}')
        except Exception as e:
            bot.send_message(call.message.chat.id, f'‚ùå –û—à–∏–±–∫–∞: {e}')
    
    elif call.data == 'retry_failed':
        failed_numbers = get_failed_numbers(call.message.chat.id)
        if not failed_numbers:
            bot.send_message(call.message.chat.id, '‚ÑπÔ∏è –ù–µ—Ç –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.')
        else:
            bot.send_message(call.message.chat.id, f'‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ {len(failed_numbers)} –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º:')
            bot.register_next_step_handler(call.message, lambda m: process_retry_failed(m, failed_numbers))
    
    elif call.data == 'history':
        history = get_history(call.message.chat.id)
        if not history:
            bot.send_message(call.message.chat.id, '‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç–∞.')
        else:
            msg = 'üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏:\n'
            for i, h in enumerate(history, 1):
                msg += f"{i}) {h[0]} | –í—Å–µ–≥–æ: {h[1]} | –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {h[2]} | –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {h[3]}\n–¢–µ–∫—Å—Ç: {h[4][:40]}...\n"
            bot.send_message(call.message.chat.id, msg)
    
    elif call.data == 'reset_history_failed':
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute('DELETE FROM history WHERE chat_id=?', (call.message.chat.id,))
        c.execute('UPDATE users SET failed_numbers=NULL WHERE chat_id=?', (call.message.chat.id,))
        conn.commit()
        conn.close()
        bot.send_message(call.message.chat.id, '‚ôªÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫ –∏ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω—ã.')
    
    elif call.data == 'export_history_csv':
        history = get_history_full(call.message.chat.id)
        if not history:
            bot.send_message(call.message.chat.id, '‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç–∞.')
        else:
            try:
                output = io.BytesIO()
                writer = csv.writer(io.TextIOWrapper(output, encoding='utf-8'))
                writer.writerow(['–î–∞—Ç–∞', '–í—Å–µ–≥–æ', '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', '–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', '–¢–µ–∫—Å—Ç'])
                for h in history:
                    writer.writerow([h[0], h[1], h[2], h[3], h[4]])
                
                output.seek(0)
                bot.send_document(
                    call.message.chat.id,
                    ('history.csv', output.getvalue())
                )
            except Exception as e:
                bot.send_message(call.message.chat.id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}')
    
    elif call.data == 'stop_broadcast':
        try:
            resp = requests.post(f'{SERVER_URL}/stop-broadcast')
            if resp.ok:
                status = resp.json().get('status')
                if status == 'stopping':
                    bot.send_message(call.message.chat.id, '‚èπÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')
                elif status == 'not_broadcasting':
                    bot.send_message(call.message.chat.id, '‚ÑπÔ∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.')
                else:
                    bot.send_message(call.message.chat.id, f'‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å: {status}')
            else:
                bot.send_message(call.message.chat.id, f'‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {resp.text}')
        except Exception as e:
            bot.send_message(call.message.chat.id, f'‚ùå –û—à–∏–±–∫–∞: {e}')
    
    elif call.data == 'change_proxy':
        try:
            resp = requests.post(f'{SERVER_URL}/change-proxy')
            if resp.ok:
                data = resp.json()
                if data.get('status') == 'ok':
                    proxy = data.get('proxy', {})
                    msg = f"üåê –ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω—ë–Ω!\nIP: {proxy.get('proxy_ip')}:{proxy.get('proxy_port')}"
                else:
                    msg = f"‚ÑπÔ∏è –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {data}"
            else:
                msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {resp.text}"
            bot.send_message(call.message.chat.id, msg)
        except Exception as e:
            bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    elif call.data == 'clear_session':
        try:
            resp = requests.post(f'{SERVER_URL}/clear-session')
            if resp.ok:
                bot.send_message(call.message.chat.id, 'üßπ –°–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞. QR-–∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã...')
            else:
                bot.send_message(call.message.chat.id, f'‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {resp.text}')
        except Exception as e:
            bot.send_message(call.message.chat.id, f'‚ùå –û—à–∏–±–∫–∞: {e}')
    
    elif call.data == 'settings':
        bot.send_message(call.message.chat.id, 
            '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n'
            '- –õ–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–æ–∫: 200 –≤ —Å—É—Ç–∫–∏\n'
            '- –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: 45-120 —Å–µ–∫\n'
            '- –ü—Ä–æ–∫—Å–∏: –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –º–µ–Ω—é\n'
            '- –î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start'
        )

# –ó–∞–≥—Ä—É–∑–∫–∞ Google Sheets
def process_sheet_link(message):
    link = message.text.strip()
    if not GSHEETS_AVAILABLE:
        bot.send_message(message.chat.id, '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ gspread –∏ oauth2client!')
        return
    # –ü–∞—Ä—Å–∏–º ID —Ç–∞–±–ª–∏—Ü—ã
    match = re.search(r'/d/([\w-]+)', link)
    if not match:
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —Ç–∞–±–ª–∏—Ü—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É!')
        return
    sheet_id = match.group(1)
    try:
        scope = 'https://spreadsheets.google.com/feeds https://www.googleapis.com/auth/drive'
        creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scopes=scope)
        client = gspread.authorize(creds)  # type: ignore
        sheet = client.open_by_key(sheet_id)
        worksheet = sheet.get_worksheet(0)
        numbers = []
        for row in worksheet.get_all_values():
            for cell in row:
                num = ''.join(filter(str.isdigit, cell))
                if len(num) >= 10:
                    numbers.append(num)
        if numbers:
            save_numbers(message.chat.id, numbers)
            bot.send_message(message.chat.id, f'–ù–æ–º–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã! –í—Å–µ–≥–æ –Ω–æ–º–µ—Ä–æ–≤: {len(numbers)}')
        else:
            bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ.')
    except Exception as e:
        bot.send_message(message.chat.id, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Google Sheets: {e}')

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏
def process_file_upload(message):
    if not message.document:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (Excel .xlsx –∏–ª–∏ CSV).')
        return
    file_info = bot.get_file(message.document.file_id)
    if not file_info.file_path:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.')
        return
    downloaded_file = bot.download_file(file_info.file_path)
    numbers = []
    if message.document.file_name.endswith('.csv'):
        f = io.StringIO(downloaded_file.decode('utf-8'))
        reader = csv.reader(f)
        for row in reader:
            for cell in row:
                num = ''.join(filter(str.isdigit, cell))
                if len(num) >= 10:
                    numbers.append(num)
    elif message.document.file_name.endswith('.xlsx'):
        f = io.BytesIO(downloaded_file)
        wb = openpyxl.load_workbook(f)
        ws = wb.active
        if ws:
            for row in ws.iter_rows(values_only=True):
                for cell in row:
                    if cell:
                        num = ''.join(filter(str.isdigit, str(cell)))
                        if len(num) >= 10:
                            numbers.append(num)
    else:
        bot.send_message(message.chat.id, '–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .xlsx –∏–ª–∏ .csv')
        return
    if numbers:
        save_numbers(message.chat.id, numbers)
        bot.send_message(message.chat.id, f'–ù–æ–º–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –í—Å–µ–≥–æ –Ω–æ–º–µ—Ä–æ–≤: {len(numbers)}')
    else:
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä–∞ –≤ —Ñ–∞–π–ª–µ.')

# –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
def process_message_text(message):
    text = message.text.strip()
    numbers = get_numbers(message.chat.id)
    if not numbers:
        bot.send_message(message.chat.id, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ Google –¢–∞–±–ª–∏—Ü—É –∏–ª–∏ —Ñ–∞–π–ª —Å –Ω–æ–º–µ—Ä–∞–º–∏!')
        return
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ä–∞—Å—Å—ã–ª–∫–æ–π
    preview = text[:60] + ('...' if len(text) > 60 else '')
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data=f'confirm_send'))
    markup.add(types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'cancel_send'))
    bot.send_message(
        message.chat.id,
        f'–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {len(numbers)} –Ω–æ–º–µ—Ä–∞–º.\n\n–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n"{preview}"\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É:',
        reply_markup=markup
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    save_numbers(message.chat.id, numbers)  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('CREATE TABLE IF NOT EXISTS temp_send (chat_id INTEGER PRIMARY KEY, text TEXT)')
    c.execute('INSERT OR REPLACE INTO temp_send (chat_id, text) VALUES (?, ?)', (message.chat.id, text))
    conn.commit()
    conn.close()

@bot.callback_query_handler(func=lambda call: call.data in ['confirm_send', 'cancel_send'])
def confirm_send_callback(call):
    bot.answer_callback_query(call.id)  # <-- –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
    if call.data == 'cancel_send':
        bot.send_message(call.message.chat.id, '–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.')
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute('DELETE FROM temp_send WHERE chat_id=?', (call.message.chat.id,))
        conn.commit()
        conn.close()
        return
    # confirm_send
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ temp_send
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('SELECT text FROM temp_send WHERE chat_id=?', (call.message.chat.id,))
    row = c.fetchone()
    conn.close()
    if not row:
        bot.send_message(call.message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.')
        return
    text = row[0]
    numbers = get_numbers(call.message.chat.id)
    resp = requests.post(f'{SERVER_URL}/send', json={'numbers': numbers, 'message': text})
    if resp.ok:
        results = resp.json().get('results', [])
        sent = sum(1 for r in results if r['status'] == 'sent')
        failed = [r['number'] for r in results if r['status'] != 'sent']
        save_failed_numbers(call.message.chat.id, failed)
        add_history(call.message.chat.id, datetime.now().strftime('%Y-%m-%d %H:%M'), len(numbers), sent, len(failed), text)
        msg = f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {len(failed)}'
        if failed:
            msg += '\n–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: ' + ', '.join(failed)
        bot.send_message(call.message.chat.id, msg)
    else:
        bot.send_message(call.message.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ!')
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('DELETE FROM temp_send WHERE chat_id=?', (call.message.chat.id,))
    conn.commit()
    conn.close()

def process_retry_failed(message, failed_numbers):
    text = message.text.strip()
    if not failed_numbers:
        bot.send_message(message.chat.id, '–ù–µ—Ç –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.')
        return
    resp = requests.post(f'{SERVER_URL}/send', json={'numbers': failed_numbers, 'message': text})
    if resp.ok:
        results = resp.json().get('results', [])
        sent = sum(1 for r in results if r['status'] == 'sent')
        failed = [r['number'] for r in results if r['status'] != 'sent']
        save_failed_numbers(message.chat.id, failed)
        add_history(message.chat.id, datetime.now().strftime('%Y-%m-%d %H:%M'), len(failed_numbers), sent, len(failed), text)
        msg = f'–ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {len(failed)}'
        if failed:
            msg += '\n–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: ' + ', '.join(failed)
        bot.send_message(message.chat.id, msg)
    else:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ!')
@bot.callback_query_handler(func=lambda call: call.data == 'check_auth_status')
def check_auth_status(call):
    try:
        resp = requests.get(f'{SERVER_URL}/session-status')
        if resp.ok:
            status = resp.json()
            if status.get('authenticated'):
                msg = '‚úÖ WhatsApp –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!'
            elif status.get('blocked'):
                msg = '‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç WhatsApp –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!'
            else:
                msg = '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. QR-–∫–æ–¥ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã...'
        else:
            msg = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏'
    except Exception as e:
        msg = f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}'
    
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, msg)
# Webhook –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–ª–æ–∫–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ polling)
from flask import Flask, request as flask_request
import threading

app = Flask(__name__)

@app.route('/notify', methods=['POST'])
def notify():
    data = flask_request.json
    chat_id = data.get('chat_id') if data else None
    reason = data.get('reason') if data else None
    if chat_id and reason:
        text = '–í–Ω–∏–º–∞–Ω–∏–µ! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç WhatsApp –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –æ—Ç–∫–ª—é—á—ë–Ω.'
        bot.send_message(chat_id, text)
    return 'ok'

def run_flask():
    app.run(port=7000)

if __name__ == '__main__':
    init_db()
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º webhook –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    import time
    def register_webhook():
        time.sleep(2)
        
        requests.post(f'{SERVER_URL}/register-tg-webhook', json={
            'url': 'http://localhost:7000/notify',
            'chat_id': 794991817  # <-- –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π chat_id
        })
    threading.Thread(target=run_flask, daemon=True).start()
    threading.Thread(target=register_webhook, daemon=True).start()
    bot.polling(none_stop=True)


@bot.message_handler(commands=['send'])
def handle_send(message):
    chat_id = message.chat.id
    text = message.text.replace('/send', '').strip()
    if not text:
        bot.reply_to(message, "‚ùóÔ∏è–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /send.")
        return

    numbers = get_numbers(chat_id)
    if not numbers:
        bot.reply_to(message, "‚ùóÔ∏è–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–º–µ—Ä–∞.")
        return

    bot.reply_to(message, f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é {len(numbers)} –Ω–æ–º–µ—Ä–æ–≤...")

    try:
        response = requests.post(f"{SERVER_URL}/api/whatsapp/broadcast", json={
            "numbers": numbers,
            "message": text
        })

        if response.status_code == 200:
            bot.send_message(chat_id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        else:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É: {str(e)}")
