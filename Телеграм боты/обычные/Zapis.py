import sqlite3
import telebot
from telebot import types
import datetime
import time
import threading
import logging

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN = "8076421586:AAHOfzXV87qtFoyMn_jLQaw4Nhf7DPDc4Ec"  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
ADMIN_ID = 794991817      # —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π Telegram ID
bot = telebot.TeleBot(TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –∏ —É—Å–ª—É–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
admin_appointments = {}
admin_services = {}

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
def init_db():
    with sqlite3.connect("appointments.db") as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER UNIQUE,
                full_name TEXT,
                phone TEXT,
                role TEXT DEFAULT 'client'
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS services (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT,
                price INTEGER,
                duration TEXT
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS appointments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                service_id INTEGER,
                date TEXT,
                time TEXT,
                status TEXT DEFAULT 'confirmed',
                notified_1h INTEGER DEFAULT 0,
                notified_24h INTEGER DEFAULT 0
            )
        ''')
        conn.commit()

init_db()

# --- –°—Ç–∞—Ä—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---
@bot.message_handler(commands=['start'])
def send_welcome(message):
    with sqlite3.connect("appointments.db") as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE telegram_id = ?", (message.chat.id,))
        user = cursor.fetchone()

    if not user:
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        bot.register_next_step_handler(message, register_name)
    else:
        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∏–Ω–∞—á–µ ‚Äì –ø–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if message.chat.id == ADMIN_ID:
            show_admin_menu(message.chat.id)
        else:
            show_user_menu(message.chat.id)

def register_name(message):
    full_name = message.text.strip()
    if not full_name:
        bot.send_message(message.chat.id, "–§–ò–û –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        bot.register_next_step_handler(message, register_name)
        return
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    bot.register_next_step_handler(message, lambda msg: register_phone(msg, full_name))

def register_phone(message, full_name):
    phone = message.text.strip()
    if not phone.isdigit() or len(phone) < 10:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(message, lambda msg: register_phone(msg, full_name))
        return

    try:
        with sqlite3.connect("appointments.db") as conn:
            cursor = conn.cursor()
            cursor.execute("INSERT INTO users (telegram_id, full_name, phone) VALUES (?, ?, ?)",
                           (message.chat.id, full_name, phone))
            conn.commit()
    except sqlite3.IntegrityError:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        show_user_menu(message.chat.id)
        return

    bot.send_message(message.chat.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    if message.chat.id == ADMIN_ID:
        show_admin_menu(message.chat.id)
    else:
        show_user_menu(message.chat.id)

# --- –ü–∞–Ω–µ–ª–∏ –º–µ–Ω—é ---
def show_user_menu(chat_id):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º", "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏", "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", "‚ùì –ü–æ–º–æ—â—å"]
    keyboard.add(*buttons)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

def show_admin_menu(chat_id):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å –Ω–∞–±–æ—Ä–æ–º –∫–Ω–æ–ø–æ–∫
    buttons = ["–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É", "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", "–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π", "–†–∞—Å—Å—ã–ª–∫–∞", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚ùì –ü–æ–º–æ—â—å"]
    keyboard.add(*buttons)
    bot.send_message(chat_id, "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏ ---
@bot.message_handler(func=lambda message: message.text in ["üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º", "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏", "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", "‚ùì –ü–æ–º–æ—â—å"] and message.chat.id != ADMIN_ID)
def user_menu_handler(message):
    if message.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º":
        book_appointment(message)
    elif message.text == "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏":
        show_user_appointments(message)
    elif message.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º":
        contact_admin(message)
    elif message.text == "‚ùì –ü–æ–º–æ—â—å":
        show_help(message)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ---
@bot.message_handler(func=lambda message: message.text in ["–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É", "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", "–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π", "–†–∞—Å—Å—ã–ª–∫–∞", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚ùì –ü–æ–º–æ—â—å"] and message.chat.id == ADMIN_ID)
def admin_menu_handler(message):
    if message.text == "–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:")
        bot.register_next_step_handler(message, admin_get_service_name)
    elif message.text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å":
        admin_add_appointment(message)
    elif message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π":
        show_all_appointments(message)
    elif message.text == "–†–∞—Å—Å—ã–ª–∫–∞":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        bot.register_next_step_handler(message, admin_broadcast)
    elif message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        show_statistics(message)
    elif message.text == "‚ùì –ü–æ–º–æ—â—å":
        show_admin_help(message)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
def book_appointment(message):
    with sqlite3.connect("appointments.db") as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id, name FROM services")
        services = cursor.fetchall()

    if not services:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    keyboard = types.InlineKeyboardMarkup()
    for service in services:
        keyboard.add(types.InlineKeyboardButton(service[1], callback_data=f"service_{service[0]}"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("service_"))
def select_service(call):
    service_id = call.data.split("_")[1]
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
    bot.register_next_step_handler(call.message, lambda msg: select_date(msg, service_id))

def select_date(message, service_id):
    try:
        datetime.datetime.strptime(message.text, "%Y-%m-%d")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
        bot.register_next_step_handler(message, lambda msg: select_date(msg, service_id))
        return

    date = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:")
    bot.register_next_step_handler(message, lambda msg: confirm_booking(msg, service_id, date))

def confirm_booking(message, service_id, date):
    appointment_time = message.text
    try:
        datetime.datetime.strptime(appointment_time, "%H:%M")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:")
        bot.register_next_step_handler(message, lambda msg: confirm_booking(msg, service_id, date))
        return

    user_id = message.chat.id
    with sqlite3.connect("appointments.db") as conn:
        cursor = conn.cursor()
        cursor.execute("INSERT INTO appointments (user_id, service_id, date, time, status) VALUES (?, ?, ?, ?, 'confirmed')", 
                       (user_id, service_id, date, appointment_time))
        conn.commit()

    bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
    show_user_menu(message.chat.id)

def show_user_appointments(message):
    user_id = message.chat.id
    with sqlite3.connect("appointments.db") as conn:
        cursor = conn.cursor()
        query = """
        SELECT a.id, s.name, s.price, a.date, a.time, a.status 
        FROM appointments a 
        JOIN services s ON a.service_id = s.id 
        WHERE a.user_id = ?
        ORDER BY a.date, a.time
        """
        cursor.execute(query, (user_id,))
        appointments = cursor.fetchall()

    if not appointments:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        show_user_menu(message.chat.id)
        return

    for appt in appointments:
        appt_id, service_name, price, date, time_str, status = appt
        text = f"ID: {appt_id}\n–£—Å–ª—É–≥–∞: {service_name}\n–¶–µ–Ω–∞: {price}\n–î–∞—Ç–∞: {date}\n–í—Ä–µ–º—è: {time_str}\n–°—Ç–∞—Ç—É—Å: {status}"
        markup = types.InlineKeyboardMarkup()
        if status == "confirmed":
            markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"cancel_{appt_id}"))
        bot.send_message(message.chat.id, text, reply_markup=markup)
    show_user_menu(message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("cancel_"))
def cancel_appointment(call):
    appt_id = call.data.split("_")[1]
    with sqlite3.connect("appointments.db") as conn:
        cursor = conn.cursor()
        cursor.execute("UPDATE appointments SET status = 'cancelled' WHERE id = ?", (appt_id,))
        conn.commit()
    bot.send_message(call.message.chat.id, "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    show_user_menu(call.message.chat.id)

def contact_admin(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    bot.register_next_step_handler(msg, forward_to_admin)

def forward_to_admin(message):
    forward_text = f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} ({message.from_user.first_name}):\n{message.text}"
    bot.send_message(ADMIN_ID, forward_text)
    bot.send_message(message.chat.id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    show_user_menu(message.chat.id)

def show_help(message):
    help_text = ("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
                 "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º ‚Äì –≤—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è\n"
                 "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏ ‚Äì –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å\n"
                 "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ‚Äì –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É\n"
                 "‚ùì –ü–æ–º–æ—â—å ‚Äì –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ")
    bot.send_message(message.chat.id, help_text)
    show_user_menu(message.chat.id)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ —Å –≤—ã–±–æ—Ä–æ–º: –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏–ª–∏ –ø–ª–∞—Ç–Ω–∞—è
def admin_get_service_name(message):
    name = message.text.strip()
    if not name:
        bot.send_message(message.chat.id, "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:")
        bot.register_next_step_handler(message, admin_get_service_name)
        return
    admin_services[message.chat.id] = {"name": name}
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–î–∞", callback_data="free_yes"),
                 types.InlineKeyboardButton("–ù–µ—Ç", callback_data="free_no"))
    bot.send_message(message.chat.id, "–£—Å–ª—É–≥–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è?", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ["free_yes", "free_no"])
def service_free_option(call):
    context = admin_services.get(call.message.chat.id, {})
    if call.data == "free_yes":
        context["price"] = 0
        bot.send_message(call.message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30 –º–∏–Ω):")
        bot.register_next_step_handler(call.message, admin_get_service_duration)
    else:
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —É—Å–ª—É–≥–∏ (—á–∏—Å–ª–æ–º):")
        bot.register_next_step_handler(call.message, admin_get_service_price)
    admin_services[call.message.chat.id] = context

def admin_get_service_price(message):
    try:
        price = int(message.text)
    except ValueError:
        bot.send_message(message.chat.id, "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –µ—â–µ —Ä–∞–∑:")
        bot.register_next_step_handler(message, admin_get_service_price)
        return
    context = admin_services.get(message.chat.id, {})
    context["price"] = price
    admin_services[message.chat.id] = context
    bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30 –º–∏–Ω):")
    bot.register_next_step_handler(message, admin_get_service_duration)

def admin_get_service_duration(message):
    duration = message.text.strip()
    context = admin_services.get(message.chat.id, {})
    context["duration"] = duration
    admin_services[message.chat.id] = context
    name = context.get("name")
    price = context.get("price")
    duration = context.get("duration")
    with sqlite3.connect("appointments.db") as conn:
        cursor = conn.cursor()
        cursor.execute("INSERT INTO services (name, price, duration) VALUES (?, ?, ?)", (name, price, duration))
        conn.commit()
    bot.send_message(message.chat.id, f"–£—Å–ª—É–≥–∞ '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    admin_services.pop(message.chat.id, None)
    show_admin_menu(message.chat.id)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def admin_add_appointment(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–ø–∏—Å–∏:")
    bot.register_next_step_handler(message, process_admin_user_id)

def process_admin_user_id(message):
    try:
        user_id = int(message.text.strip())
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π Telegram ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        bot.register_next_step_handler(message, process_admin_user_id)
        return

    with sqlite3.connect("appointments.db") as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE telegram_id = ?", (user_id,))
        if cursor.fetchone() is None:
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø–∏—Å—å –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
    admin_appointments[message.chat.id] = {'user_id': user_id}

    with sqlite3.connect("appointments.db") as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id, name FROM services")
        services = cursor.fetchall()
    if not services:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥.")
        return
    keyboard = types.InlineKeyboardMarkup()
    for service in services:
        keyboard.add(types.InlineKeyboardButton(service[1], callback_data=f"admin_service_{service[0]}"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –∑–∞–ø–∏—Å–∏:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_service_"))
def admin_select_service(call):
    service_id = call.data.split("_")[-1]
    context = admin_appointments.get(call.message.chat.id, {})
    context['service_id'] = service_id
    admin_appointments[call.message.chat.id] = context
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
    bot.register_next_step_handler(call.message, admin_select_date)

def admin_select_date(message):
    try:
        datetime.datetime.strptime(message.text, "%Y-%m-%d")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
        bot.register_next_step_handler(message, admin_select_date)
        return
    context = admin_appointments.get(message.chat.id, {})
    context['date'] = message.text.strip()
    admin_appointments[message.chat.id] = context
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:")
    bot.register_next_step_handler(message, admin_select_time)

def admin_select_time(message):
    try:
        datetime.datetime.strptime(message.text, "%H:%M")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:")
        bot.register_next_step_handler(message, admin_select_time)
        return
    context = admin_appointments.get(message.chat.id, {})
    context['time'] = message.text.strip()
    admin_appointments[message.chat.id] = context

    user_id = context.get('user_id')
    service_id = context.get('service_id')
    date = context.get('date')
    time_str = context.get('time')
    with sqlite3.connect("appointments.db") as conn:
        cursor = conn.cursor()
        cursor.execute("INSERT INTO appointments (user_id, service_id, date, time, status) VALUES (?, ?, ?, ?, 'confirmed')",
                       (user_id, service_id, date, time_str))
        conn.commit()
    bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    admin_appointments.pop(message.chat.id, None)
    show_admin_menu(message.chat.id)

def show_all_appointments(message):
    with sqlite3.connect("appointments.db") as conn:
        cursor = conn.cursor()
        query = """
        SELECT a.id, u.full_name, s.name, s.price, a.date, a.time, a.status 
        FROM appointments a
        LEFT JOIN users u ON a.user_id = u.telegram_id
        JOIN services s ON a.service_id = s.id
        ORDER BY a.date, a.time
        """
        cursor.execute(query)
        appointments = cursor.fetchall()
    if not appointments:
        bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        for appt in appointments:
            appt_id, full_name, service_name, price, date, time_str, status = appt
            text = f"ID: {appt_id}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name}\n–£—Å–ª—É–≥–∞: {service_name}\n–¶–µ–Ω–∞: {price}\n–î–∞—Ç–∞: {date}\n–í—Ä–µ–º—è: {time_str}\n–°—Ç–∞—Ç—É—Å: {status}"
            bot.send_message(message.chat.id, text)
    show_admin_menu(message.chat.id)

def admin_broadcast(message):
    broadcast_text = message.text
    with sqlite3.connect("appointments.db") as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT telegram_id FROM users")
        users = cursor.fetchall()
    for user in users:
        bot.send_message(user[0], f"[–†–∞—Å—Å—ã–ª–∫–∞]: {broadcast_text}")
    bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    show_admin_menu(message.chat.id)

def show_admin_help(message):
    help_text = ("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n"
                 "–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —É—Å–ª—É–≥—É (–≤—ã–±–æ—Ä: –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏–ª–∏ –ø–ª–∞—Ç–Ω–∞—è, —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ü–µ–Ω—ã –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)\n"
                 "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                 "–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π ‚Äì —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏\n"
                 "–†–∞—Å—Å—ã–ª–∫–∞ ‚Äì –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
                 "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äì —Å–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–ø–∏—Å—è–º\n"
                 "‚ùì –ü–æ–º–æ—â—å ‚Äì –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ")
    bot.send_message(message.chat.id, help_text)
    show_admin_menu(message.chat.id)

def show_statistics(message):
    with sqlite3.connect("appointments.db") as conn:
        cursor = conn.cursor()
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        cursor.execute("SELECT COUNT(*) FROM appointments")
        total = cursor.fetchone()[0]
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        cursor.execute("SELECT COUNT(*) FROM appointments WHERE status = 'confirmed'")
        confirmed = cursor.fetchone()[0]
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        cursor.execute("SELECT COUNT(*) FROM appointments WHERE status = 'cancelled'")
        cancelled = cursor.fetchone()[0]
        # –°—É–º–º–∞—Ä–Ω—ã–π –¥–æ—Ö–æ–¥ (—É—Å–ª—É–≥–∏ —Å —Ü–µ–Ω–æ–π –±–æ–ª—å—à–µ 0)
        cursor.execute("""
            SELECT SUM(s.price) FROM appointments a 
            JOIN services s ON a.service_id = s.id 
            WHERE a.status = 'confirmed' AND s.price > 0
        """)
        income = cursor.fetchone()[0]
        if income is None:
            income = 0

    stat_text = (f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–µ–π:\n"
                 f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {total}\n"
                 f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö: {confirmed}\n"
                 f"–û—Ç–º–µ–Ω–µ–Ω–æ: {cancelled}\n"
                 f"–°—É–º–º–∞—Ä–Ω—ã–π –¥–æ—Ö–æ–¥: {income}")
    bot.send_message(message.chat.id, stat_text)
    show_admin_menu(message.chat.id)

# --- –§–æ–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
def send_reminders():
    while True:
        now = datetime.datetime.now()
        with sqlite3.connect("appointments.db") as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT id, user_id, date, time, notified_1h, notified_24h FROM appointments WHERE status = 'confirmed'")
            appointments = cursor.fetchall()

        for appt in appointments:
            appt_id, user_id, date, appt_time, notified_1h, notified_24h = appt
            appointment_datetime_str = f"{date} {appt_time}"
            try:
                appointment_datetime = datetime.datetime.strptime(appointment_datetime_str, "%Y-%m-%d %H:%M")
            except ValueError:
                continue

            time_diff = (appointment_datetime - now).total_seconds()

            if 86340 <= time_diff <= 86460 and not notified_24h:
                bot.send_message(user_id, "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É –≤–∞—Å –∑–∞–ø–∏—Å—å –∑–∞–≤—Ç—Ä–∞!")
                with sqlite3.connect("appointments.db") as conn:
                    cursor = conn.cursor()
                    cursor.execute("UPDATE appointments SET notified_24h = 1 WHERE id = ?", (appt_id,))
                    conn.commit()

            if 3540 <= time_diff <= 3660 and not notified_1h:
                bot.send_message(user_id, "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É –≤–∞—Å –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ 1 —á–∞—Å!")
                with sqlite3.connect("appointments.db") as conn:
                    cursor = conn.cursor()
                    cursor.execute("UPDATE appointments SET notified_1h = 1 WHERE id = ?", (appt_id,))
                    conn.commit()
        time.sleep(60)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    reminder_thread = threading.Thread(target=send_reminders, daemon=True)
    reminder_thread.start()
    bot.polling(none_stop=True)
