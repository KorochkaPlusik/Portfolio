import sqlite3
import logging
from datetime import datetime, date
import pytz
from apscheduler.schedulers.background import BackgroundScheduler

import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ======
API_TOKEN     = '8076421586:AAHOfzXV87qtFoyMn_jLQaw4Nhf7DPDc4Ec'
MAIN_ADMIN_ID = 794991817  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π user_id –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
TZ            = pytz.timezone('Europe/Moscow')

BOT_DB        = 'bot.db'
TODO_DB       = 'todo.db'

# –ü–æ–ª—è –∞–Ω–∫–µ—Ç—ã
FIELDS = [
    'name', 'surname', 'age', 'position',
    'phone', 'salary', 'pay_date',
    'sign_date', 'bank', 'comment'
]

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = telebot.TeleBot(API_TOKEN)

# —Ö—Ä–∞–Ω–∏—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_state = {}  # user_id -> dict

# ====== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑ ======
def init_db():
    # –æ—Å–Ω–æ–≤–Ω–∞—è –ë–î –¥–ª—è –∞–Ω–∫–µ—Ç –∏ –∞–¥–º–∏–Ω–æ–≤
    con = sqlite3.connect(BOT_DB)
    cur = con.cursor()
    cur.execute('''
      CREATE TABLE IF NOT EXISTS profiles (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        photo_file_id TEXT,
        name TEXT, surname TEXT, age INTEGER,
        position TEXT, phone TEXT, salary REAL,
        pay_date TEXT, sign_date TEXT,
        bank TEXT, comment TEXT
      );
    ''')
    cur.execute('''
      CREATE TABLE IF NOT EXISTS admin_requests (
        user_id INTEGER PRIMARY KEY,
        name TEXT,
        status TEXT  -- 'pending', 'approved', 'rejected'
      );
    ''')
    cur.execute('''
      INSERT OR IGNORE INTO admin_requests(user_id, name, status)
      VALUES (?, ?, 'approved')
    ''', (MAIN_ADMIN_ID, '–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω'))
    con.commit()
    con.close()

    # –ë–î –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π –∏ –¥–µ–ª
    tcon = sqlite3.connect(TODO_DB)
    tcur = tcon.cursor()
    tcur.execute('''
      CREATE TABLE IF NOT EXISTS specialties (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        name TEXT NOT NULL
      );
    ''')
    tcur.execute('''
      CREATE TABLE IF NOT EXISTS todos (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        spec_id INTEGER,
        description TEXT NOT NULL,
        created_at TEXT NOT NULL,
        completed INTEGER NOT NULL DEFAULT 0,
        FOREIGN KEY(spec_id) REFERENCES specialties(id)
      );
    ''')
    tcon.commit()
    tcon.close()

def is_admin(user_id: int) -> bool:
    con = sqlite3.connect(BOT_DB)
    cur = con.cursor()
    cur.execute("SELECT status FROM admin_requests WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    con.close()
    return bool(row and row[0] == 'approved')

# ====== –ú–µ–Ω—é ======
def send_main_menu(chat_id):
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="add"),
            InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="edit")
        ],
        [
            InlineKeyboardButton("–ü–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç", callback_data="search"),
            InlineKeyboardButton("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∞–¥–º–∏–Ω–∞", callback_data="become_admin")
        ],
        [
            InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –¥–µ–ª", callback_data="todo")
        ]
    ])
    bot.send_message(chat_id, "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb)

def send_todo_menu(chat_id):
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="todo_add")],
        [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏", callback_data="todo_list")],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", callback_data="spec_add")],
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", callback_data="spec_list")],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    bot.send_message(chat_id, "üìã –ú–µ–Ω—é —Å–ø–∏—Å–∫–∞ –¥–µ–ª:", reply_markup=kb)

# ====== –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ======
def daily_check():
    today = date.today().strftime('%Y-%m-%d')
    con = sqlite3.connect(BOT_DB)
    cur = con.cursor()
    cur.execute("SELECT id, name, surname FROM profiles WHERE pay_date=?", (today,))
    rows = cur.fetchall()
    if rows:
        text = "üí∞ –ê–Ω–∫–µ—Ç—ã —Å –≤—ã–ø–ª–∞—Ç–æ–π —Å–µ–≥–æ–¥–Ω—è:\n" + "\n".join(f"ID={r[0]} {r[1]} {r[2]}" for r in rows)
        cur.execute("SELECT user_id FROM admin_requests WHERE status='approved'")
        admins = [r[0] for r in cur.fetchall()]
        for aid in admins:
            try:
                bot.send_message(aid, text)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {aid}: {e}")
    con.close()

# ====== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ======
@bot.message_handler(commands=['start'])
def cmd_start(msg):
    send_main_menu(msg.chat.id)

@bot.message_handler(commands=['become_admin'])
def cmd_become_admin(msg):
    uid = msg.from_user.id
    name = msg.from_user.full_name
    con = sqlite3.connect(BOT_DB)
    cur = con.cursor()
    cur.execute(
        "INSERT OR IGNORE INTO admin_requests(user_id, name, status) VALUES (?, ?, 'pending')",
        (uid, name)
    )
    con.commit(); con.close()
    bot.send_message(uid, "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.")
    # —É–≤–µ–¥–æ–º–∏–º —Ç–µ–∫—É—â–∏—Ö –∞–¥–º–∏–Ω–æ–≤
    con = sqlite3.connect(BOT_DB)
    cur = con.cursor()
    cur.execute("SELECT user_id FROM admin_requests WHERE status='approved' AND user_id!=?", (uid,))
    for (aid,) in cur.fetchall():
        bot.send_message(aid,
            f"üì¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç {name} (ID={uid}).\n–û–¥–æ–±—Ä–∏—Ç—å: /approve_{uid}\n–û—Ç–∫–ª–æ–Ω–∏—Ç—å: /reject_{uid}"
        )
    con.close()

@bot.message_handler(regexp=r'^/approve_(\d+)$')
def cmd_approve(msg):
    if not is_admin(msg.from_user.id): return
    target = int(msg.text.split('_',1)[1])
    con = sqlite3.connect(BOT_DB); cur = con.cursor()
    cur.execute("UPDATE admin_requests SET status='approved' WHERE user_id=?", (target,))
    con.commit(); con.close()
    bot.send_message(target, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.")
    bot.reply_to(msg, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω.")

@bot.message_handler(regexp=r'^/reject_(\d+)$')
def cmd_reject(msg):
    if not is_admin(msg.from_user.id): return
    target = int(msg.text.split('_',1)[1])
    con = sqlite3.connect(BOT_DB); cur = con.cursor()
    cur.execute("UPDATE admin_requests SET status='rejected' WHERE user_id=?", (target,))
    con.commit(); con.close()
    bot.send_message(target, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    bot.reply_to(msg, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

# ====== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: inline-–∫–Ω–æ–ø–∫–∏ ======
@bot.callback_query_handler(func=lambda cq: cq.data in (
    "main_menu","add","edit","search","become_admin","todo"
))
def menu_callback(cq):
    bot.answer_callback_query(cq.id)
    user_id = cq.from_user.id
    chat_id = cq.message.chat.id

    if cq.data == "main_menu":
        send_main_menu(chat_id)

    elif cq.data == "todo":
        send_todo_menu(chat_id)

    elif cq.data == "add":
        if not is_admin(user_id):
            bot.send_message(chat_id, "üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–Ω–∫–µ—Ç—ã.")
            return
        user_state[user_id] = {'action': 'adding', 'data': {}, 'field_idx': -1}
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
        bot.send_message(chat_id, "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∞–Ω–∫–µ—Ç—ã.", reply_markup=kb)

    elif cq.data == "edit":
        if not is_admin(user_id):
            bot.send_message(chat_id, "üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—ã.")
            return
        user_state[user_id] = {'action': 'editing', 'step': 'await_id'}
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –∞–Ω–∫–µ—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)

    elif cq.data == "search":
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
        bot.send_message(chat_id,
            "–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ (–ø–æ–ª–µ=–∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).\n"
            "–ü–æ–ª—è: " + ', '.join(FIELDS),
            reply_markup=kb
        )
        user_state[user_id] = {'action': 'search'}

    elif cq.data == "become_admin":
        fake = cq.message
        fake.from_user = cq.from_user
        cmd_become_admin(fake)

# ====== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –¥–µ–ª –∏ —Å–ø–µ—Ü. ======
@bot.callback_query_handler(func=lambda cq: cq.data in (
    "todo_add","todo_list","todo_cancel","spec_add","spec_list"
))
def callback_todo(cq):
    bot.answer_callback_query(cq.id)
    uid = cq.from_user.id
    chat_id = cq.message.chat.id

    if cq.data == "todo_add":
        # –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", callback_data="spec_list")],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="todo_cancel")]
        ]))
        return

    if cq.data == "todo_list":
        tcon = sqlite3.connect(TODO_DB); tcur = tcon.cursor()
        tcur.execute("""
            SELECT t.id, COALESCE(s.name,'–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'), t.description, t.created_at, t.completed
            FROM todos t
            LEFT JOIN specialties s ON t.spec_id = s.id
            WHERE t.user_id=?
            ORDER BY t.created_at DESC
        """, (uid,))
        rows = tcur.fetchall(); tcon.close()
        if not rows:
            bot.send_message(chat_id, "‚úÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
        else:
            text = "\n".join(
                f"{r[0]}. [{'‚úî' if r[4] else ' '}] [{r[3]}] ({r[1]}) {r[2]}"
                for r in rows
            )
            bot.send_message(chat_id, text)
        send_todo_menu(chat_id)
        return

    if cq.data == "spec_add":
        user_state[uid] = {'action': 'spec_adding'}
        bot.send_message(chat_id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="todo_cancel")]
        ]))
        return

    if cq.data == "spec_list":
        tcon = sqlite3.connect(TODO_DB); tcur = tcon.cursor()
        tcur.execute("SELECT id, name FROM specialties WHERE user_id=?", (uid,))
        specs = tcur.fetchall(); tcon.close()
        if not specs:
            bot.send_message(chat_id, "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π. –î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ ¬´–î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å¬ª.")
            send_todo_menu(chat_id)
            return
        kb = InlineKeyboardMarkup()
        for sid, name in specs:
            kb.add(InlineKeyboardButton(name, callback_data=f"spec|{sid}"))
        kb.add(InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        bot.send_message(chat_id, "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:", reply_markup=kb)
        return

    if cq.data == "todo_cancel":
        user_state.pop(uid, None)
        send_todo_menu(chat_id)
        return

# ====== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ ======
@bot.message_handler(func=lambda m: user_state.get(m.from_user.id, {}).get('action') == 'spec_adding')
def handle_spec_add(msg):
    uid  = msg.from_user.id
    name = msg.text.strip()
    tcon = sqlite3.connect(TODO_DB); tcur = tcon.cursor()
    tcur.execute("INSERT INTO specialties(user_id, name) VALUES (?, ?)", (uid, name))
    tcon.commit(); tcon.close()
    bot.send_message(msg.chat.id, f"‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å ¬´{name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    # –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü. –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–æ–∫
    callback = telebot.types.CallbackQuery()
    callback.from_user = msg.from_user
    callback.message = msg
    callback.data = "spec_list"
    callback_todo(callback)

# ====== –í—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ ======
@bot.callback_query_handler(func=lambda cq: cq.data.startswith('spec|'))
def callback_select_spec(cq):
    bot.answer_callback_query(cq.id)
    uid = cq.from_user.id
    chat_id = cq.message.chat.id
    spec_id = int(cq.data.split('|',1)[1])
    tcon = sqlite3.connect(TODO_DB); tcur = tcon.cursor()
    tcur.execute("SELECT name FROM specialties WHERE id=?", (spec_id,))
    name = tcur.fetchone()[0]
    tcon.close()
    user_state[uid] = {'action': 'todo_adding', 'spec_id': spec_id}
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="todo_cancel")]])
    bot.send_message(chat_id, f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è ¬´{name}¬ª:", reply_markup=kb)

# ====== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ ======
@bot.message_handler(func=lambda m: user_state.get(m.from_user.id, {}).get('action') == 'todo_adding')
def handle_todo_add(msg):
    uid  = msg.from_user.id
    desc = msg.text.strip()
    spec_id = user_state[uid].get('spec_id')
    now = datetime.now(TZ).strftime('%Y-%m-%d %H:%M:%S')
    tcon = sqlite3.connect(TODO_DB); tcur = tcon.cursor()
    tcur.execute(
        "INSERT INTO todos(user_id, spec_id, description, created_at) VALUES (?, ?, ?, ?)",
        (uid, spec_id, desc, now)
    )
    tcon.commit(); tcon.close()
    bot.send_message(msg.chat.id, "‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    user_state.pop(uid, None)
    send_todo_menu(msg.chat.id)

# ====== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã ======
@bot.message_handler(content_types=['photo'])
def handle_photo(msg):
    uid = msg.from_user.id
    state = user_state.get(uid)
    if not state or state.get('action') != 'adding':
        return
    state['data']['photo_file_id'] = msg.photo[-1].file_id
    state['field_idx'] = 0
    field = FIELDS[0]
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
    bot.send_message(uid, f"–í–≤–µ–¥–∏—Ç–µ {field.replace('_',' ')}:", reply_markup=kb)

@bot.message_handler(func=lambda m: user_state.get(m.from_user.id, {}).get('action') == 'adding')
def handle_add_fields(msg):
    uid = msg.from_user.id
    state = user_state[uid]
    idx = state['field_idx']
    state['data'][FIELDS[idx]] = msg.text.strip()
    idx += 1
    if idx < len(FIELDS):
        state['field_idx'] = idx
        field = FIELDS[idx]
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
        bot.send_message(uid, f"–í–≤–µ–¥–∏—Ç–µ {field.replace('_',' ')}:", reply_markup=kb)
    else:
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        vals = [ state['data'][f] for f in FIELDS ]
        vals.insert(0, state['data']['photo_file_id'])
        con = sqlite3.connect(BOT_DB); cur = con.cursor()
        placeholders = ','.join('?' for _ in range(len(FIELDS)+1))
        columns = 'photo_file_id,' + ','.join(FIELDS)
        cur.execute(f"INSERT INTO profiles({columns}) VALUES({placeholders})", vals)
        con.commit(); con.close()
        bot.send_message(uid, "‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        user_state.pop(uid, None)
        send_main_menu(uid)

# ====== –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã ======
@bot.message_handler(func=lambda m: user_state.get(m.from_user.id, {}).get('action') == 'editing'
                                 and user_state[m.from_user.id]['step'] == 'await_id')
def handle_edit_id(msg):
    uid = msg.from_user.id
    pid = msg.text.strip()
    con = sqlite3.connect(BOT_DB); cur = con.cursor()
    cur.execute("SELECT id FROM profiles WHERE id=?", (pid,))
    if not cur.fetchone():
        bot.send_message(uid, "‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        con.close()
        return
    con.close()
    user_state[uid].update({'profile_id': pid, 'step': 'choose_field'})
    kb = InlineKeyboardMarkup([
        *[[InlineKeyboardButton(f.replace('_',' '), callback_data=f"edit|{f}|{pid}")] for f in FIELDS],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    bot.send_message(uid, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)

@bot.callback_query_handler(func=lambda cq: cq.data.startswith('edit|'))
def callback_edit_field(cq):
    bot.answer_callback_query(cq.id)
    _, field, pid = cq.data.split('|')
    uid = cq.from_user.id
    user_state[uid] = {'action': 'editing', 'profile_id': pid, 'field': field, 'step': 'await_value'}
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
    bot.send_message(uid, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field.replace('_',' ')}:", reply_markup=kb)

@bot.message_handler(func=lambda m: user_state.get(m.from_user.id, {}).get('action') == 'editing'
                                 and user_state[m.from_user.id]['step'] == 'await_value')
def handle_edit_value(msg):
    uid = msg.from_user.id
    state = user_state[uid]
    field = state['field']
    pid   = state['profile_id']
    new_val = msg.text.strip()
    con = sqlite3.connect(BOT_DB); cur = con.cursor()
    cur.execute(f"UPDATE profiles SET {field}=? WHERE id=?", (new_val, pid))
    con.commit(); con.close()
    bot.send_message(uid, "‚úÖ –ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    user_state.pop(uid, None)
    send_main_menu(uid)

# ====== –ü–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç—ã ======
@bot.message_handler(func=lambda m: user_state.get(m.from_user.id, {}).get('action') == 'search')
def handle_search(msg):
    text = msg.text.strip()
    tokens = text.split()
    clauses, vals = [], []
    for tok in tokens:
        if '=' in tok:
            f, v = tok.split('=', 1)
            if f in FIELDS:
                clauses.append(f"{f} LIKE ?")
                vals.append(f"%{v}%")
                continue
        sub = []
        for f in ['name','surname','age','position','phone','salary','pay_date']:
            sub.append(f"{f} LIKE ?")
            vals.append(f"%{tok}%")
        clauses.append("(" + " OR ".join(sub) + ")")
    if not clauses:
        bot.send_message(msg.chat.id, "‚ùå –ù–µ—á–µ–≥–æ –∏—Å–∫–∞—Ç—å.")
        return
    query = "SELECT id, name, surname FROM profiles WHERE " + " AND ".join(clauses)
    con = sqlite3.connect(BOT_DB); cur = con.cursor()
    cur.execute(query, vals)
    rows = cur.fetchall(); con.close()
    if not rows:
        bot.send_message(msg.chat.id, "üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        for pid, name, surname in rows:
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å", callback_data=f"show|{pid}")],
                [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            bot.send_message(msg.chat.id, f"ID={pid}: {name} {surname}", reply_markup=kb)
    user_state.pop(msg.from_user.id, None)

@bot.callback_query_handler(func=lambda cq: cq.data.startswith('show|'))
def callback_show_profile(cq):
    bot.answer_callback_query(cq.id)
    pid = cq.data.split('|',1)[1]
    con = sqlite3.connect(BOT_DB); cur = con.cursor()
    cur.execute("SELECT * FROM profiles WHERE id=?", (pid,))
    row = cur.fetchone(); con.close()
    if not row:
        bot.send_message(cq.message.chat.id, "‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    _, photo_id, name, surname, age, position, phone, salary, pay_date, sign_date, bank, comment = row
    caption = (
        f"üÜî ID: {pid}\n"
        f"üë§ –ò–º—è: {name}\n"
        f"üë• –§–∞–º–∏–ª–∏—è: {surname}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age}\n"
        f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {salary}\n"
        f"üìÖ –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ –ó–ü: {pay_date}\n"
        f"‚úçÔ∏è –î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è: {sign_date}\n"
        f"üè¶ –ë–∞–Ω–∫: {bank}\n"
        f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    )
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
    bot.send_photo(cq.message.chat.id, photo_id, caption=caption, reply_markup=kb)

# ====== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ======
if __name__ == '__main__':
    init_db()
    scheduler = BackgroundScheduler(timezone=TZ)
    scheduler.add_job(daily_check, 'cron', hour=9, minute=0)
    scheduler.start()
    bot.infinity_polling()
